#include "colors.inc"
#include "shapes3.inc"


#macro hollowTear (bigRadius, smallRadius, cutRadius, angleA, height, thic) //TOKENS... #end
difference{
    //the filling
    merge{
        difference{
            //big
            cylinder {
                <0,0,0>,
                <0,height,0>,
                bigRadius
            }
            merge{  //to be cut
                //cut
                cylinder {
                    <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        -0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                            <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        height+0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                    cutRadius
                }
                //box
                prism {-0.1, height+0.2, 5
                    <-bigRadius,bigRadius>
                    <bigRadius,bigRadius>
                    <bigRadius, 0>
                    <bigRadius - smallRadius, 0>
                    <-bigRadius, tan(angleA) * (2*bigRadius - smallRadius)>
                    translate<0,-0.1,0>
                }
            }
        }
        //small
        cylinder {
            <bigRadius - smallRadius,0,0>,
            <bigRadius - smallRadius,height,0>,
            smallRadius
        }
    }

    //to be hollowed
    merge{
        difference{
            //big
            cylinder {
                <0,0,0>,
                <0,height+0.2,0>,
                bigRadius - thic
            }
            merge{  //to be cut
                //cut
                cylinder {
                    <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        -0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                            <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        height+0.2+0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                    cutRadius + thic
                }
                //tip rounding
                //cylinder{
                //
                //}
                //box
                prism {-0.1, height+0.2+0.2, 5
                    <-bigRadius,bigRadius>
                    <bigRadius,bigRadius>
                    <bigRadius, 0>
                    <bigRadius - smallRadius, 0>
                    <-bigRadius, tan(angleA) * (2*bigRadius - smallRadius)>
                    translate<0,-0.1,0>
                }
            }
        }
        //small
        cylinder {
            <bigRadius - smallRadius,0,0>,
            <bigRadius - smallRadius,height+0.2,0>,
            smallRadius -thic
        }
        translate<0,-0.1,0>
    }
}
#end

#macro insideRoundedHollowTear (bigRadius, smallRadius, cutRadius, angleA, height, thic) //TOKENS... #end
intersection{
    //the filling
    merge{
        difference{
            //big
            cylinder {
                <0,0,0>,
                <0,height,0>,
                bigRadius
            }
            merge{  //to be cut
                //cut
                cylinder {
                    <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        -0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                            <
                        bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                        height+0.1,
                        sin(angleA) * (smallRadius + cutRadius)
                    >,
                    cutRadius
                }
                //box
                prism {-0.1, height+0.2, 5
                    <-bigRadius,bigRadius>
                    <bigRadius,bigRadius>
                    <bigRadius, 0>
                    <bigRadius - smallRadius, 0>
                    <-bigRadius, tan(angleA) * (2*bigRadius - smallRadius)>
                    translate<0,-0.1,0>
                }
            }
        }
        //small
        cylinder {
            <bigRadius - smallRadius,0,0>,
            <bigRadius - smallRadius,height,0>,
            smallRadius
        }
    }

    //to be intersected
}
#end

#macro roundedHollowTear (bigRadius, smallRadius, cutRadius, angleA, height, thic, 
roundness, tailHoleRadius) //TOKENS... #end
#local cx = bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius);
#local cy = sin(angleA) * (smallRadius + cutRadius);

#local a = sqrt(cx*cx + cy*cy);
#local b = bigRadius - thic - tailHoleRadius;
#local c = cutRadius + thic + tailHoleRadius;

#local angleBC = asin(abs(cy/cx));
#local angleG =acos( (a*a + b*b - c*c)/(2*a*b) ) - angleBC;

#local tRx = -(b)*cos(angleG);
#local tRy = -(b)*sin(angleG);
merge{

    difference{
        merge{     
            //big ring
            object {
                Round_Cylinder_Tube(
                    <0,0,0>, // start
                    <0,height,0>, // end
                    bigRadius-thic+2*roundness, // major radius
                    roundness, // border radius
                    0, //  1 = filled; 0 = open
                    0  //  Merge_On,
                )
                //texture{ pigment{ color rgb<1,1,1>}
                //         finish { phong 0.1}
                //} // end texture
            }
            //add outside rim
            difference{
                cylinder {
                    <0,0,0>,
                    <0,height,0>,
                    bigRadius
                }
                merge{
                    difference{
                        cylinder {
                            <0,-0.1,0>,
                            <0,height+0.1,0>,
                            bigRadius - thic +roundness
                        }
                        prism {-0.1, height+0.2+0.2, 5
                            <cx, cy>,
                            <-bigRadius,bigRadius>,
                            <-bigRadius,-bigRadius>,
                            <tRx - (tailHoleRadius+thic)*cos(angleG), tRy-(tailHoleRadius+thic)*sin(angleG)>,
                            <tRx, tRy>
                        translate<0,-0.1,0>
                        }
                    }
                    cylinder{
                        <tRx,-0.1,tRy>,
                        <tRx,height+0.1,tRy>,
                        tailHoleRadius+roundness
                    }
                }
            }
            
            //rounded part of the cut cylinder
            intersection{
                //cut rounded cylinder filled
                object {
                    Round_Cylinder_Tube(
                        <
                            bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                            0,
                            sin(angleA) * (smallRadius + cutRadius)
                        >,
                        <
                            bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                            height,
                            sin(angleA) * (smallRadius + cutRadius)
                        >,
                        cutRadius + thic, // major radius
                        roundness, // border radius
                        1, //  1 = filled; 0 = open
                        0  //  Merge_On,
                    )
                    //texture{ pigment{ color rgb<1,1,1>}
                    //         finish { phong 0.1}
                    //} // end texture
                }
                //intersect with big cylinder only
                cylinder {
                    <0,-0.1,0>,
                    <0,height+0.1,0>,
                    bigRadius
                }
            }      
        }
        //cut out prism and inside of cut cylinder
        merge{
            cylinder {
                <
                    bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                    -0.1,
                    sin(angleA) * (smallRadius + cutRadius)
                >,
                <
                    bigRadius - smallRadius - cos(angleA) * (smallRadius + cutRadius),
                    height+0.1,
                    sin(angleA) * (smallRadius + cutRadius)
                >,
                cutRadius
            }
            prism {-0.1, height+0.2+0.2, 5
                <-bigRadius,bigRadius>
                <bigRadius,bigRadius>
                <bigRadius, 0>
                <bigRadius - smallRadius, 0>
                <-bigRadius, tan(angleA) * (2*bigRadius - smallRadius)>
            translate<0,-0.1,0>
            }
        }       
    }
    //small rounded circle intersecting with prism
    intersection{
        merge{
            object {
                Round_Cylinder_Tube(
                    <bigRadius - smallRadius,0,0>,
                    <bigRadius - smallRadius,height,0>,
                    smallRadius-thic+roundness*2, // major radius
                    roundness, // border radius
                    0, //  1 = filled; 0 = open
                    0  //  Merge_On,
                )
                //texture{ pigment{ color rgb<1,1,1>}
                //         finish { phong 0.1}
                //} // end texture
            }
            // add outside rim
            difference{
                cylinder {
                    <bigRadius - smallRadius,0,0>,
                    <bigRadius - smallRadius,height,0>,
                    smallRadius
                }
                cylinder {
                    <bigRadius - smallRadius,-0.1,0>,
                    <bigRadius - smallRadius,height+0.1,0>,
                    smallRadius - thic + roundness
                }
            }
        }
        prism {-0.1, height+0.2+0.2, 5
            <-bigRadius,bigRadius>
            <bigRadius,bigRadius>
            <bigRadius, 0>
            <bigRadius - smallRadius, 0>
            <-bigRadius, tan(angleA) * (2*bigRadius - smallRadius)>
        translate<0,-0.1,0>
        }
    }

    //tip rounder
    merge{

        prism {-0.1, height+0.2+0.2, 3
            <0,0>
            <
                -(b) * cos( angleG ),
                -(b) * sin( angleG )
            >
            <cx,cy>
            translate<0,-0.1,0>
        }
        // prism {-0.1, height+0.2+0.2, 5
        //     <cx, cy>,
        //     <-bigRadius,bigRadius>,
        //     <-bigRadius,-bigRadius>,
        //     <tRx - (tailHoleRadius+thic)*cos(angleG), tRy-(tailHoleRadius+thic)*sin(angleG)>,
        //     <tRx, tRy>
        // translate<0,-0.1,0>
        // }        
        intersection{
            object {
                Round_Cylinder_Tube(
                    <
                        tRx ,
                        0,
                        tRy
                    >,
                    <
                        tRx,
                        height,
                        tRy
                    >,
                    tailHoleRadius+roundness*2, // major radius
                    roundness, // border radius
                    0, //  1 = filled; 0 = open
                    0  //  Merge_On,
                )
            }
            prism {-0.1, height+0.2+0.2, 5
                <cx, cy>,
                <-bigRadius,bigRadius>,
                <-bigRadius,-bigRadius>,
                <tRx - (tailHoleRadius+thic)*cos(angleG), tRy-(tailHoleRadius+thic)*sin(angleG)>,
                <tRx, tRy>
            translate<0,-0.1,0>
            } 
            // prism{-0.1, height+0.2+0.2, 3
            //     <
            //         -(b) * cos( acos( (a*a + b*b - c*c)/(2*a*b) ) - angleBC ),
            //         -(b) * sin( acos( (a*a + b*b - c*c)/(2*a*b) ) - angleBC )
            //     >,
            //     <cx,cy>
            //     <
            //         -(b) * cos( acos( (a*a + b*b - c*c)/(2*a*b) ) - angleBC ),
            //         -(b) * sin( acos( (a*a + b*b - c*c)/(2*a*b) ) - angleBC )
            //     >
            //     translate<0,-0.1,0>
            // }
        }
    }
}

#end




camera { orthographic
    location <0, 5,0>
    //location <-10, 10,0>
    look_at <0,0,0>
}
light_source {
    <0, 100, 10>
    color rgb <1, 1, 1>
}

object{ roundedHollowTear(
        2,      //bigRadius,
        1,      //smallRadius,
        1,      //cutRadius,
        0.2,    //angleA,
        3,      //height,
        0.4,    //thic,
        0.1,     //roundness
        0.1    //tail roundness
        )

    texture{ pigment {color Blue }}
}